# Copyright 2020 Canonical Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For further info, check https://github.com/canonical/charmcraft
name: charmcraft
base: core20
summary: Charmcraft supports Kubernetes operator development and collaboration
license: Apache-2.0
description: |
  Charmcraft enables collaboration between operator developers, and
  publication on Charmhub.io, home of the Open Operator Collection.

  Use `charmcraft` to:

   * Init a new charm file structure
   * Build your Kubernetes operator charm package
   * Register your charm name on Charmhub
   * Upload your charm to Charmhub
   * Release your charm into channels

  You can use charmcraft with operators written in any language but we
  recommend the Python Operator Framework from https://pypi.org/project/ops/
  developed at https://github.com/canonical/operator for ease of development
  and collaboration.

  Charmcraft and the Python Operator Framework extend the operator pattern
  beyond Kubernetes with universal operators that drive Linux and
  Windows apps. The universal operator pattern is very exciting for
  multi-cloud application management.

adopt-info: charmcraft  # look for 'snapcraftctl set-*' in the charmcraft part
architectures:
  - build-on: s390x
  - build-on: ppc64el
  - build-on: arm64
  - build-on: armhf
  - build-on: amd64
  # - build-on: i386  # there is no i386 core20

apps:
  charmcraft:
    command: bin/python3 $SNAP/bin/charmcraft
    completer: completion.bash
    environment:
      # have the cache outside of the version dirs (avoids keeping N copies)
      XDG_CACHE_HOME: $SNAP_USER_COMMON/cache
      # same for config
      XDG_CONFIG_HOME: $SNAP_USER_COMMON/config
      # just drop the logs here for now (this will change; see #53)
      TMPDIR: $SNAP_USER_COMMON
      # help git find its stuff
      GIT_TEMPLATE_DIR: $SNAP/git/templates
      GIT_EXEC_PATH: $SNAP/git/git-core

grade: stable
confinement: classic

parts:
  # Classic core20 snaps require staged python.
  python3:
    plugin: nil
    build-packages:
      - python3-dev
    stage-packages:
      - libpython3-stdlib
      - libpython3.8-minimal
      - libpython3.8-stdlib
      - python3.8-minimal
      - python3-distutils
      - python3-minimal
      - python3-pkg-resources
      - python3-pip
      - python3-setuptools
      - python3-venv
      - python3-wheel
    override-build: |
      snapcraftctl build
      install -D -m 0755 $SNAPCRAFT_PROJECT_DIR/snap/local/sitecustomize.py $SNAPCRAFT_PART_INSTALL/usr/lib/python3.8/sitecustomize.py

  charmcraft:
    after: [python3]
    source: .
    plugin: python
    requirements:
      - requirements.txt
    build-packages:
      - libffi-dev
    stage-packages:
      - git
    # snapcraft uses venv, which doesn't pull in wheel (as opposed to virtualenv)
    # so then 'pip install PyYAML' gets cross.
    python-packages: [wheel]
    build-environment:
      - LDFLAGS: -L/usr/lib/python3.8
      - CPPFLAGS: -I/usr/include/python3.8
    override-pull: |
      # do the usual pull stuff
      snapcraftctl pull
      # set the version
      snapcraftctl set-version "$( python3 -c 'import charmcraft; print(charmcraft.__version__)' )"
    override-build: |
      snapcraftctl build
      # why is this needed?
      cp -v completion.bash ../install
      # python3 fixup symlink (snapcraft bug)
      ln -sf ../usr/bin/python3.8 $SNAPCRAFT_PART_INSTALL/bin/python3
    organize:
      # move things around so they're tidier
      usr/lib/git-core: git/git-core
      usr/share/git-core/templates: git/templates
      usr/bin/git: bin/git
      lib/python3.8/site-packages: lib/
    stage:
      # copy in only what we need. Comment out this whole section to grab
      # everything if something stops working, and then once you've spotted what
      # it was we needed, add it back in here. This keeps the snap lean, and us
      # aware of our actual dependencies (more or less -- look at what pip does
      # wrt vendoring).
      - bin/charmcraft
      - bin/python3
      - bin/pip3
      - bin/git
      - completion.bash
      - pyvenv.cfg
      - lib/charmcraft
      - lib/charmcraft-*.egg-info
      - lib/pip
      - lib/pip-*.dist-info
      - lib/wheel
      - lib/wheel-*.dist-info
      - lib/appdirs.py
      - lib/appdirs-*.dist-info
      - lib/attr
      - lib/attrs-*.dist-info
      - lib/certifi
      - lib/certifi-*.dist-info
      - lib/chardet
      - lib/chardet-*.dist-info
      - lib/_cffi_backend.*.so
      - lib/cffi.libs
      - lib/idna
      - lib/idna-*.dist-info
      - lib/jsonschema
      - lib/jsonschema-*.dist-info
      - lib/macaroonbakery
      - lib/macaroonbakery-*.dist-info
      - lib/pydantic
      - lib/pydantic-*.dist-info
      - lib/pyrfc3339
      - lib/pyRFC3339-*.dist-info
      - lib/pytz
      - lib/pytz-*.dist-info
      - lib/nacl
      - lib/PyNaCl-*.dist-info
      - lib/pymacaroons
      - lib/pymacaroons-*.dist-info
      - lib/google
      - lib/humanize
      - lib/humanize-*.dist-info
      - lib/jinja2
      - lib/markupsafe
      - lib/protobuf-*.pth
      - lib/protobuf-*.dist-info
      - lib/pyrsistent
      - lib/pyrsistent-*.dist-info
      - lib/requests
      - lib/six.py
      - lib/six-*.dist-info
      - lib/tabulate.py
      - lib/tabulate-*.dist-info
      - lib/urllib3
      - lib/urllib3-*.dist-info
      - lib/dateutil
      - lib/python_dateutil-*.dist-info
      - lib/requests_toolbelt
      - lib/requests_toolbelt-*.dist-info
      - lib/typing_extensions.py
      - lib/typing_extensions-*.dist-info
      - lib/yaml
      # this effectively means we're shipping pip and wheel twice (once above,
      # and once below), but untangling that is probably not worth it.
      - share/python-wheels
      # 'git clone' complains if it can't find these
      - git/templates
      # regular git+http or https (it's a single file ;)
      - git/git-core/git-remote-http
      - git/git-core/git-remote-https
      # all the following bits of git-core needed for git submodules support
      - git/git-core/git-submodule
      - git/git-core/git-sh-setup
      - git/git-core/git-sh-i18n
      - git/git-core/git-sh-i18n--envsubst
      - git/git-core/git-parse-remote
      # *all* the following libs needed for git-remote-http /o\
      - "**/libcurl-gnutls.so.4"
      - "**/libcurl-gnutls.so.4.*"
      - "**/libnghttp2.so.14"
      - "**/libnghttp2.so.14.*"
      - "**/libasn1.so.8"
      - "**/libasn1.so.8.*"
      - "**/libbrotlicommon.so.1"
      - "**/libbrotlicommon.so.1.*"
      - "**/libbrotlidec.so.1"
      - "**/libbrotlidec.so.1.*"
      - "**/libgssapi.so.3"
      - "**/libgssapi.so.3.*"
      - "**/libhcrypto.so.4"
      - "**/libhcrypto.so.4.*"
      - "**/libheimbase.so.1"
      - "**/libheimbase.so.1.*"
      - "**/libheimntlm.so.0"
      - "**/libheimntlm.so.0.*"
      - "**/libhx509.so.5"
      - "**/libhx509.so.5.*"
      - "**/libkrb5.so.26"
      - "**/libkrb5.so.26.*"
      - "**/liblber-2.4.so.2"
      - "**/liblber-2.4.so.2.*"
      - "**/libldap_r-2.4.so.2"
      - "**/libldap_r-2.4.so.2.*"
      - "**/libpsl.so.5"
      - "**/libpsl.so.5.*"
      - "**/libroken.so.18"
      - "**/libroken.so.18.*"
      - "**/librtmp.so.1"
      - "**/librtmp.so.1.*"
      - "**/libsasl2.so.2"
      - "**/libsasl2.so.2.*"
      - "**/libssh.so.4"
      - "**/libssh.so.4.*"
      - "**/libwind.so.0"
      - "**/libwind.so.0.*"
